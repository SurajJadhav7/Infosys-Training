
#OOPR-Assgn-32
#Done
from abc import ABCMeta,abstractmethod
class Employee(metaclass=ABCMeta):
    def __init__(self,job_band,employee_name,basic_salary,qualification):
        self.__job_band=job_band
        self.__employee_name=employee_name
        self.__basic_salary=basic_salary
        self.__qualification=qualification
    def get_job_band(self):
        return self.__job_band
    def get_employee_name(self):
        return self.__employee_name
    def get_basic_salary(self):
        return self.__basic_salary
    def get_qualification(self):
        return self.__qualification
    @abstractmethod
    def validate_job_band(self):
        pass
    def validate_basic_salary(self):
        if self.__basic_salary>3000:
            return True
        return False
    def validate_qualification(self):
        if self.__qualification in ["Bachelors","Masters"]:
            return True
        return False
    @abstractmethod
    def calculate_gross_salary(self):
        pass
class Graduate(Employee):
    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):
        super().__init__(job_band, employee_name, basic_salary, qualification)
        self.__cgpa=cgpa
    def get_cgpa(self):
        return self.__cgpa
    def validate_job_band(self):
        if self.get_job_band() in ['A','B','C']:
            return True
        return False
    def calculate_gross_salary(self):
        if self.validate_basic_salary() and self.\
        validate_qualification() and self.validate_job_band():
            if 4<=self.__cgpa<=4.25:
                tpi=1000
            elif 4.26<=self.__cgpa<=4.5:
                tpi=1700
            elif 4.51<=self.__cgpa<=4.75:
                tpi=3200
            elif 4.76<=self.__cgpa<=5:
                tpi=5000
            else:
                tpi=0
            if self.get_job_band()=='A':
                incentives=4
            elif self.get_job_band()=='B':
                incentives=6
            elif self.get_job_band()=='C':
                incentives=10
            gross=self.get_basic_salary()*1.12+tpi+\
            incentives*.01*self.get_basic_salary()
            return gross
        return -1
class Lateral(Employee):
    def __init__(self,job_band,employee_name,\
                 basic_salary,qualification,skill_set):
        super().__init__(job_band, employee_name, basic_salary, qualification)
        self.__skill_set=skill_set
    def get_skill_set(self):
        return self.__skill_set
    def validate_job_band(self):
        if self.get_job_band() in ['D','E','F']:
            return True
        return False
    def calculate_gross_salary(self):
        if super().validate_basic_salary() and super().\
        validate_qualification() and self.validate_job_band():
            if self.__skill_set=='AGP':
                tpi=6500
            elif self.__skill_set=='AGPT':
                tpi=8200
            elif self.__skill_set=='AGDEV':
                tpi=11500
            else:
                tpi=0
            if super().get_job_band()=='D':
                incentives=13
            elif super().get_job_band()=='E':
                incentives=16
            elif super().get_job_band()=='F':
                incentives=20
            gross=super().get_basic_salary()*1.12+tpi+incentives*\
            .01*super().get_basic_salary()
            return gross
        return -1
