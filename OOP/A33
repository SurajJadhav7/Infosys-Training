#OOPR-Tryout
#Start writing your code here
class Customer:
    def __init__(self,customer_id,customer_name,age,account):
        self.__customer_id=customer_id
        self.__customer_name=customer_name
        self.__age=age
        self.__account=account
    def get_customer_id(self):
        return self.__customer_id
    def get_customer_name(self):
        return self.__customer_name
    def get_age(self):
        return self.__age
    def get_account(self):
        return self.__account
    def withdraw(self,amount):
        if self.__account.get_balance()<self.__account.get_min_balance():
            raise LimitReachedException
        elif amount>self.__account.get_balance():
            raise OverdrawException
        else:
            self.__account.get_balance()-=amount
    def take_card(self):
        print("Take card out from the ATM")
class Account:
    def __init__(self,account_type,balance,min_balance):
        self.__account_type=account_type
        self.__balance=balance
        self.__min_balance=min_balance
    def get_account_type(self):
        return self.__account_type
    def get_balance(self):
        return self.__balance
    def get_min_balance(self):
        return self.__min_balance
    def set_min_balance(self, min_balance):
        self.__min_balance = min_balance
class PrivilegedCustomer(Customer):
    def __init__(self,customer_id,customer_name,age,account,bonus_points):
        super().__init__(customer_id, customer_name, age, account)
        self.__bonus_points=bonus_points
    def get_bonus_points(self):
        return self.__bonus_points
    def withdraw(self,amount):
        super().withdraw(amount)
    def __increase_bonus(self):
        if self.__account.get_balance()>1000:
            self.__bonus_points+=10
        else:
            self.__bonus_points+=2
